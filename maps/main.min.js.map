{"version":3,"sources":["index.js"],"names":["formElement","document","querySelector","phoneInput","passwordInput","passwordMask","maskElement","maskElementSelector","configObject","inputSelector","submitButtonSelector","disabledButtonClass","validInputClass","invalidInputClass","phoneInput$$1","querySelectorAll","input","mask","evt","keyCode","code","addEventListener","setAttribute","forEach","matrix","i","def","val","this","value","selectionStart","new_value","preventDefault","a","length","charAt","indexOf","replace","slice","reg","substr","RegExp","test","maskPassword","style","color","maskElements","Array","from","key","undefined","insertAdjacentHTML","remove","Form","_ref","handleSubmitButton","_classCallCheck","_backButton","_handleSubmitButton","_form","_this","_inputList","_formValues","name","_this2","_getInputValues","FormValidator","_ref2","_inputSelector","_submitButtonSelector","_disabledButtonClass","_validInputClass","_invalidInputClass","inputList","some","validity","contains","classList","add","valid","_hasInvalidInput","button","_this3","_toggleButtonState","_isValid","maskPhone","formValidator","formValues","phone","match","join","password","fetch","method","headers","authorization","concat","Content-Type","res","Promise","reject","status","form","log","setEventListeners"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const formElement = document.querySelector('.form'),\nphoneInput = document.querySelector('.form__input_type_phone'),\npasswordInput = document.querySelector('.form__input_type_password'),\npasswordMask = document.querySelector('.form__password-mask'),\nmaskElement = '<span class=\"form__password-star\"></span>',\nmaskElementSelector = '.form__password-star',\nconfigObject = {\n  inputSelector: '.form__input',\n  submitButtonSelector: '.form__submit',\n  disabledButtonClass: 'form__submit_disabled',\n  validInputClass: 'form__input_is-valid_true',\n  invalidInputClass: 'form__input_is-valid_false'\n};\n\nconst maskPhone = phoneInput$$1 => {\n  window.addEventListener('DOMContentLoaded', () => {\n    phoneInput$$1.setAttribute('pattern', '[0-9][ -].[ -][0-9]{3}[ -].[ -][0-9]{3}[ -][0-9]{2}[ -][0-9]{2}');\n    phoneInput$$1.setAttribute('maxlength', 19);\n\n    [].forEach.call(document.querySelectorAll('.form__input_type_phone'), input => { // this - массив инпутов, input - параметр функции call\n      function mask(evt) {\n        let keyCode = evt.code;\n\n        let pos = this.selectionStart;\n        if (pos < 5) evt.preventDefault();\n\n        const matrix = '8 ( ___ ) ___-__-__';\n\n        let i = 0,\n          def = matrix.replace(/\\D/g, ''),\n          val = this.value.replace(/\\D/g, ''),\n          new_value = matrix.replace(/[_\\d]/g, function(a) {\n            return i < val.length ? val.charAt(i++) || def.charAt(i) : a;\n          });\n\n        i = new_value.indexOf('_');\n        if (i != -1) {\n          i < 8 && (i = 4);\n          new_value = new_value.slice(0, i);\n          this.selectionStart = new_value.length + i;\n        }\n\n        let reg = matrix.substr(0, this.value.length)\n        .replace(/_/g, function(a) {\n            return '\\\\d{1,' + a.length + '}';\n          })\n        .replace(/[()]/g, '\\\\$&');\n\n        reg = new RegExp('^' + reg + '$');\n\n        if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;\n      }\n\n      input.addEventListener('input', mask);\n      input.addEventListener('focus', mask);\n    });\n  });\n};\n\nconst maskPassword = (\n  passwordInput,\n  passwordMask,\n  maskElement,\n  maskElementSelector\n) => {\n  passwordInput.style.color = 'transparent';\n\n  passwordInput.addEventListener('keydown', evt => {\n    const maskElements = Array.from(passwordMask.querySelectorAll(maskElementSelector));\n\n    if ((evt.key === 'Backspace') && (maskElements[maskElements.length - 1] !== undefined)) {\n      maskElements[maskElements.length -1].remove();\n    }\n  });\n\n  passwordInput.addEventListener('keypress', evt => {\n    if (evt.key !== 'Enter') {\n      passwordMask.insertAdjacentHTML('beforeend', maskElement);\n    }\n  });\n};\n\nclass Form {\n  constructor({ formElement, handleSubmitButton }) {\n    this._form = formElement;\n    this._backButton = this._form.querySelector('.form__back-button');\n    this._handleSubmitButton = handleSubmitButton;\n  }\n\n  _getInputValues() {\n    this._inputList = this._form.querySelectorAll('.form__input');\n    this._formValues = {};\n\n    this._inputList.forEach(input => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  setEventListeners() {\n    this._form.addEventListener('submit', evt => {\n      evt.preventDefault();\n\n      this._handleSubmitButton(this._getInputValues());\n    });\n  }\n}\n\nclass FormValidator {\n  constructor({ formElement, configObject }) {\n    this._form = formElement;\n    this._inputSelector = configObject.inputSelector;\n    this._submitButtonSelector = configObject.submitButtonSelector;\n    this._disabledButtonClass = configObject.disabledButtonClass;\n    this._validInputClass = configObject.validInputClass;\n    this._invalidInputClass = configObject.invalidInputClass;\n  }\n\n  _hasInvalidInput(inputList) {\n    return inputList.some(input => {\n      return !input.validity.valid;\n    });\n  }\n\n  _isValid(input) {\n    if (!input.classList.contains('form__input_type_password')) {\n      if (!input.validity.valid) {\n        input.classList.remove(this._validInputClass);\n        input.classList.add(this._invalidInputClass);\n      } else {\n        input.classList.remove(this._invalidInputClass);\n        input.classList.add(this._validInputClass);\n      }\n  }\n  }\n\n  _toggleButtonState(inputList, button) {\n    if (this._hasInvalidInput(inputList)) {\n      button.classList.add(this._disabledButtonClass);\n      button.setAttribute('disabled', true);\n    } else {\n      button.classList.remove(this._disabledButtonClass);\n      button.removeAttribute('disabled', true);\n    }\n  }\n\n  enableValidation() {\n    const inputList = Array.from(this._form.querySelectorAll(this._inputSelector));\n    const button = this._form.querySelector(this._submitButtonSelector);\n\n    this._toggleButtonState(inputList, button);\n\n    inputList.forEach(input => {\n      input.addEventListener('input', () => {\n        this._isValid(input);\n        this._toggleButtonState(inputList, button);\n      });\n    });\n  }\n}\n\nmaskPhone(phoneInput);\nmaskPassword(\n  passwordInput,\n  passwordMask,\n  maskElement,\n  maskElementSelector\n);\n\nconst formValidator = new FormValidator({ formElement, configObject });\nformValidator.enableValidation();\n\nformElement.setAttribute('novalidate', true);\n\nconst form = new Form({\n  formElement,\n  handleSubmitButton: (formValues) => {\n    formValues.phone = formValues.phone.match(/\\d/g).join('');\n\n    const phone = formValues.phone,\n    password = formValues.password;\n\n    fetch('https://example.com/auth', {\n      method: 'POST',\n      headers: {\n        authorization: `${phone} ${password}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n});\nform.setEventListeners();\n"]}