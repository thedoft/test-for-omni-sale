{"version":3,"sources":["index.js"],"names":["formElement","document","querySelector","phoneInput","passwordInput","passwordMaskContainer","maskElement","maskElementSelector","configObject","inputSelector","submitButtonSelector","disabledButtonClass","validInputClass","invalidInputClass","input","evt","code","selectionStart","preventDefault","matrix","i","mask","def","keyCode","val","this","value","new_value","a","length","charAt","indexOf","replace","slice","reg","substr","RegExp","test","addEventListener","bind","maskPassword","maskElements","Array","from","maskContainer","querySelectorAll","undefined","remove","key","Form","insertAdjacentHTML","_ref","handleSubmitButton","_classCallCheck","_form","_backButton","_handleSubmitButton","_this","_inputList","_formValues","forEach","_this2","_getInputValues","FormValidator","_ref2","_inputSelector","_submitButtonSelector","_disabledButtonClass","_validInputClass","_invalidInputClass","inputList","some","validity","classList","add","button","_hasInvalidInput","setAttribute","removeAttribute","_toggleButtonState","_this3","_isValid","style","color","maskPhone","form","formValues","phone","match","join","password","fetch","method","headers","res","status","err","formValidator","enableValidation"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const formElement = document.querySelector('.form'),\nphoneInput = document.querySelector('.form__input_type_phone'),\npasswordInput = document.querySelector('.form__input_type_password'),\npasswordMaskContainer = document.querySelector('.form__password-mask'),\nmaskElement = '<span class=\"form__password-star\"></span>',\nmaskElementSelector = '.form__password-star',\nconfigObject = {\n  inputSelector: '.form__input',\n  submitButtonSelector: '.form__submit',\n  disabledButtonClass: 'form__submit_disabled',\n  validInputClass: 'form__input_is-valid_true',\n  invalidInputClass: 'form__input_is-valid_false'\n};\n\nconst maskPhone = input => {\n  function mask(evt) {\n    let keyCode = evt.code;\n\n    let pos = this.selectionStart;\n    if (pos < 5) evt.preventDefault();\n\n    const matrix = '8 ( ___ ) ___-__-__';\n\n    let i = 0,\n      def = matrix.replace(/\\D/g, ''),\n      val = this.value.replace(/\\D/g, ''),\n      new_value = matrix.replace(/[_\\d]/g, function(a) {\n        return i < val.length ? val.charAt(i++) || def.charAt(i) : a;\n      });\n\n    i = new_value.indexOf('_');\n    if (i != -1) {\n      i < 8 && (i = 4);\n      new_value = new_value.slice(0, i);\n      this.selectionStart = new_value.length + i;\n    }\n\n    let reg = matrix.substr(0, this.value.length)\n    .replace(/_/g, function(a) {\n        return '\\\\d{1,' + a.length + '}';\n      })\n    .replace(/[()]/g, '\\\\$&');\n\n    reg = new RegExp('^' + reg + '$');\n\n    if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;\n  }\n\n  input.addEventListener('input', mask.bind(input));\n  input.addEventListener('focus', mask.bind(input));\n};\n\nconst maskPassword = (\n  input,\n  maskContainer,\n  maskElement,\n  maskElementSelector\n) => {\n  input.addEventListener('keydown', evt => {\n    const maskElements = Array.from(maskContainer.querySelectorAll(maskElementSelector));\n\n    if ((evt.key === 'Backspace') && (maskElements[maskElements.length - 1] !== undefined)) {\n      maskElements[maskElements.length -1].remove();\n    }\n  });\n\n  input.addEventListener('keypress', evt => {\n    if (evt.key !== 'Enter') {\n      maskContainer.insertAdjacentHTML('beforeend', maskElement);\n    }\n  });\n};\n\nclass Form {\n  constructor({ formElement, handleSubmitButton }) {\n    this._form = formElement;\n    this._backButton = this._form.querySelector('.form__back-button');\n    this._handleSubmitButton = handleSubmitButton;\n  }\n\n  _getInputValues() {\n    this._inputList = this._form.querySelectorAll('.form__input');\n    this._formValues = {};\n\n    this._inputList.forEach(input => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  setEventListeners() {\n    this._form.addEventListener('submit', evt => {\n      evt.preventDefault();\n\n      this._handleSubmitButton(this._getInputValues());\n    });\n  }\n}\n\nclass FormValidator {\n  constructor({ formElement, configObject }) {\n    this._form = formElement;\n    this._inputSelector = configObject.inputSelector;\n    this._submitButtonSelector = configObject.submitButtonSelector;\n    this._disabledButtonClass = configObject.disabledButtonClass;\n    this._validInputClass = configObject.validInputClass;\n    this._invalidInputClass = configObject.invalidInputClass;\n  }\n\n  _hasInvalidInput(inputList) {\n    return inputList.some(input => {\n      return !input.validity.valid;\n    });\n  }\n\n  _isValid(input) {\n    if (!input.classList.contains('form__input_type_password')) {\n      if (!input.validity.valid) {\n        input.classList.remove(this._validInputClass);\n        input.classList.add(this._invalidInputClass);\n      } else {\n        input.classList.remove(this._invalidInputClass);\n        input.classList.add(this._validInputClass);\n      }\n  }\n  }\n\n  _toggleButtonState(inputList, button) {\n    if (this._hasInvalidInput(inputList)) {\n      button.classList.add(this._disabledButtonClass);\n      button.setAttribute('disabled', true);\n    } else {\n      button.classList.remove(this._disabledButtonClass);\n      button.removeAttribute('disabled', true);\n    }\n  }\n\n  enableValidation() {\n    const inputList = Array.from(this._form.querySelectorAll(this._inputSelector));\n    const button = this._form.querySelector(this._submitButtonSelector);\n\n    this._toggleButtonState(inputList, button);\n\n    inputList.forEach(input => {\n      input.addEventListener('input', () => {\n        this._isValid(input);\n        this._toggleButtonState(inputList, button);\n      });\n    });\n  }\n}\n\n// для корректной работы при отключенном JS\nformElement.setAttribute('novalidate', true);\nphoneInput.setAttribute('pattern', '[0-9][ -].[ -][0-9]{3}[ -].[ -][0-9]{3}[ -][0-9]{2}[ -][0-9]{2}');\nphoneInput.setAttribute('maxlength', 19);\npasswordInput.style.color = 'transparent';\n\nmaskPhone(phoneInput);\nmaskPassword(\n  passwordInput,\n  passwordMaskContainer,\n  maskElement,\n  maskElementSelector\n);\n\nconst formValidator = new FormValidator({ formElement, configObject });\nformValidator.enableValidation();\n\nconst form = new Form({\n  formElement,\n  handleSubmitButton: (formValues) => {\n    formValues.phone = formValues.phone.match(/\\d/g).join('');\n\n    const phone = formValues.phone,\n    password = formValues.password;\n\n    fetch('https://example.com/auth', {\n      method: 'POST',\n      headers: {\n        authorization: `${phone} ${password}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n});\nform.setEventListeners();\n"]}