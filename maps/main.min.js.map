{"version":3,"sources":["index.js"],"names":["formElement","document","querySelector","passwordInput","passwordMask","maskElement","maskElementSelector","configObject","inputSelector","submitButtonSelector","disabledButtonClass","validInputClass","invalidInputClass","setAttribute","querySelectorAll","input","mask","evt","keyCode","code","addEventListener","forEach","matrix","i","def","val","this","value","selectionStart","new_value","preventDefault","a","length","charAt","indexOf","replace","slice","reg","substr","RegExp","test","maskPassword","maskElements","Array","from","key","undefined","insertAdjacentHTML","remove","Form","_ref","handleSubmitButton","_classCallCheck","_backButton","_handleSubmitButton","_form","_this","_inputList","_formValues","name","_this2","_getInputValues","FormValidator","_ref2","_inputSelector","_submitButtonSelector","_disabledButtonClass","_validInputClass","_invalidInputClass","inputList","some","validity","contains","classList","add","valid","_hasInvalidInput","button","_this3","_toggleButtonState","_isValid","maskPhone","formValidator","formValues","phone","match","join","password","fetch","method","headers","authorization","concat","Content-Type","res","Promise","reject","status","form","log","setEventListeners"],"mappings":"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","file":"../js/main.min.js","sourcesContent":["const formElement = document.querySelector('.form'),\npasswordInput = document.querySelector('.form__input_type_password'),\npasswordMask = document.querySelector('.form__password-mask'),\nmaskElement = '<span class=\"form__password-star\"></span>',\nmaskElementSelector = '.form__password-star',\nconfigObject = {\n  inputSelector: '.form__input',\n  submitButtonSelector: '.form__submit',\n  disabledButtonClass: 'form__submit_disabled',\n  validInputClass: 'form__input_is-valid_true',\n  invalidInputClass: 'form__input_is-valid_false'\n};\n\nconst maskPhone = () => {\n  window.addEventListener(\"DOMContentLoaded\", () => {\n    document.querySelector('.form__input_type_phone').setAttribute('pattern', '[0-9][ -].[ -][0-9]{3}[ -].[ -][0-9]{3}[ -][0-9]{2}[ -][0-9]{2}');\n    document.querySelector('.form__input_type_phone').setAttribute('maxlength', 19);\n\n    [].forEach.call(document.querySelectorAll('.form__input_type_phone'), input => { // this - массив инпутов, input - параметр функции call\n      function mask(evt) {\n        let keyCode = evt.code;\n\n        let pos = this.selectionStart;\n        if (pos < 5) evt.preventDefault();\n\n        const matrix = \"8 ( ___ ) ___-__-__\";\n\n        let i = 0,\n          def = matrix.replace(/\\D/g, \"\"),\n          val = this.value.replace(/\\D/g, \"\"),\n          new_value = matrix.replace(/[_\\d]/g, function(a) {\n            return i < val.length ? val.charAt(i++) || def.charAt(i) : a;\n          });\n\n        i = new_value.indexOf(\"_\");\n        if (i != -1) {\n          i < 8 && (i = 4);\n          new_value = new_value.slice(0, i);\n          this.selectionStart = new_value.length + i;\n        }\n\n        let reg = matrix.substr(0, this.value.length)\n        .replace(/_/g, function(a) {\n            return \"\\\\d{1,\" + a.length + \"}\";\n          })\n        .replace(/[()]/g, \"\\\\$&\");\n\n        reg = new RegExp(\"^\" + reg + \"$\");\n\n        if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;\n      }\n\n      input.addEventListener(\"input\", mask);\n      input.addEventListener(\"focus\", mask);\n    });\n  });\n};\n\nconst maskPassword = (\n  passwordInput,\n  passwordMask,\n  maskElement,\n  maskElementSelector\n) => {\n  document.querySelector('.form__input_type_password').style.textIndent = '-9999px';\n\n  passwordInput.addEventListener('keydown', evt => {\n    const maskElements = Array.from(passwordMask.querySelectorAll(maskElementSelector));\n\n    if ((evt.key === 'Backspace') && (maskElements[maskElements.length - 1] !== undefined)) {\n      maskElements[maskElements.length -1].remove();\n    }\n  });\n\n  passwordInput.addEventListener('keypress', evt => {\n    if (evt.key !== 'Enter') {\n      passwordMask.insertAdjacentHTML('beforeend', maskElement);\n    }\n  });\n};\n\nclass Form {\n  constructor({ formElement, handleSubmitButton }) {\n    this._form = formElement;\n    this._backButton = this._form.querySelector('.form__back-button');\n    this._handleSubmitButton = handleSubmitButton;\n  }\n\n  _getInputValues() {\n    this._inputList = this._form.querySelectorAll('.form__input');\n    this._formValues = {};\n\n    this._inputList.forEach(input => {\n      this._formValues[input.name] = input.value;\n    });\n\n    return this._formValues;\n  }\n\n  setEventListeners() {\n    this._form.addEventListener('submit', evt => {\n      evt.preventDefault();\n\n      this._handleSubmitButton(this._getInputValues());\n    });\n  }\n}\n\nclass FormValidator {\n  constructor({ formElement, configObject }) {\n    this._form = formElement;\n    this._inputSelector = configObject.inputSelector;\n    this._submitButtonSelector = configObject.submitButtonSelector;\n    this._disabledButtonClass = configObject.disabledButtonClass;\n    this._validInputClass = configObject.validInputClass;\n    this._invalidInputClass = configObject.invalidInputClass;\n  }\n\n  _hasInvalidInput(inputList) {\n    return inputList.some(input => {\n      return !input.validity.valid;\n    });\n  }\n\n  _isValid(input) {\n    if (!input.classList.contains('form__input_type_password')) {\n      if (!input.validity.valid) {\n        input.classList.remove(this._validInputClass);\n        input.classList.add(this._invalidInputClass);\n      } else {\n        input.classList.remove(this._invalidInputClass);\n        input.classList.add(this._validInputClass);\n      }\n  }\n  }\n\n  _toggleButtonState(inputList, button) {\n    if (this._hasInvalidInput(inputList)) {\n      button.classList.add(this._disabledButtonClass);\n      button.setAttribute('disabled', true);\n    } else {\n      button.classList.remove(this._disabledButtonClass);\n      button.removeAttribute('disabled', true);\n    }\n  }\n\n  enableValidation() {\n    const inputList = Array.from(this._form.querySelectorAll(this._inputSelector));\n    const button = this._form.querySelector(this._submitButtonSelector);\n\n    this._toggleButtonState(inputList, button);\n\n    inputList.forEach(input => {\n      input.addEventListener('input', () => {\n        this._isValid(input);\n        this._toggleButtonState(inputList, button);\n      });\n    });\n  }\n}\n\nmaskPhone();\nmaskPassword(\n  passwordInput,\n  passwordMask,\n  maskElement,\n  maskElementSelector\n);\n\nconst formValidator = new FormValidator({ formElement, configObject });\nformValidator.enableValidation();\n\nformElement.setAttribute('novalidate', true);\n\nconst form = new Form({\n  formElement,\n  handleSubmitButton: (formValues) => {\n    formValues.phone = formValues.phone.match(/\\d/g).join('');\n\n    const phone = formValues.phone,\n    password = formValues.password;\n\n    fetch('https://example.com/auth', {\n      method: 'POST',\n      headers: {\n        authorization: `${phone} ${password}`,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Ошибка: ${res.status}`);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n});\nform.setEventListeners();\n"]}